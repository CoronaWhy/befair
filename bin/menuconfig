#!/bin/sh -e

BASEDIR=$(realpath $(dirname $(realpath $0))/..)
cd $BASEDIR

DISTROS_DIR=distributives
DISTRO_ACTIVE_LINK=distributive-active
SERVICES_AVAILABLE_DIR=services-available
STANDALONE_DIR=exports

MENU_HR="==================================================================================="

################################
msg() {
    TYPE=$1
    shift
    case "$TYPE" in
        warn) printf "WARNING: %s\n" "$*" >&2 ;;
        err)  printf "ERROR: %s\n" "$*" >&2 ;;
        null) ;;
        *)    printf "%s\n" "$*" ;;
    esac
}

die() {
    msg err "$*"
    exit 1
}

check_active() {
    if [ ! -L $DISTRO_ACTIVE_LINK ]; then
        if [ -e $DISTRO_ACTIVE_LINK ]; then
            die "$DISTRO_ACTIVE_LINK is not a symbolic link." \
                "It's should be link to active distributive setup"
        fi
    fi
}

distro_is_valid() {
    DIR="$1"
    MSG_TYPE="${2:-err}"

    if ! ls $DIR/*.yaml 2> /dev/null >&2; then
        msg $MSG_TYPE "There is no $DIR/*.yaml"
        return 1
    fi

    if ! ls $DIR/*.yaml | grep -qv '\.override.yaml' > /dev/null; then
        msg $MSG_TYPE "There is only $DIR/*.override.yaml. Need at least one not override.yaml"
        return 1
    fi

    if [ ! -e $DIR/.env ]; then
        msg $MSG_TYPE "There is no $DIR/.env"
        return 1
    fi

    if ls $DIR/*.yml 2> /dev/null >&2; then
        msg $MSG_TYPE "There is no $DIR/*.yml files. Please rename or move out them from distributive"
        return 1
    fi

    for YAML in $DIR/*.yaml; do
        if [ -L $YAML ]; then
            FILE=$(readlink $YAML)
            if [ "$(basename $FILE)" != "$(basename $YAML)" ]; then
                TEST_FAIL=true
                msg $MSG_TYPE "Link $YAML point to file $FILE with different name"
            fi
        fi
    done

    if [ -n "$TEST_FAIL" ]; then
        unset TEST_FAIL
        return 1
    fi
    # TODO: check is link distributives/localhost/Makefile to ../../mk/distro-makefile.mk
    # if not, check if there is string 'include ../../mk/distro-makefile.mk'
}

get_distros_list() {
     find "$1" -maxdepth 1 -type d -printf "%P\n"
}

get_services_active_list() {
    unset SERVICES

    ls "$1"/*.yaml 2> /dev/null 1>&2 || return

    SERVICE_DIR=$(readlink $1)
    SERVICE_DIR=${SERVICE_DIR#*/} # remove prefix with $DISTROS_DIR
    for SERVICE in "$1"/*.yaml; do
        SERVICE=$SERVICE_DIR/$(basename $SERVICE)
        SERVICES="$SERVICES $SERVICE"
    done

    echo $SERVICES
    unset SERVICES
}

get_services_available_list() {
    unset SERVICES

    for SERVICE in $(find $SERVICES_AVAILABLE_DIR -name '*.yaml' -printf "%P\n" | sort); do
        if [ -z "$1" -o ! -e $1/$(basename $SERVICE) ]; then
            SERVICES="$SERVICES $SERVICE"
        fi
    done

    echo $SERVICES
    unset SERVICES
}

# function will generate:
# 1. Update PROMPT variable from $1 parameter
# 2. Use value of variable name from $2
# 2. MENU_ITEM_<$2>_<number> variable name from $2.. parameters
# 3. Add ITEMS to PROMPT
# 4. optional $3 is name of fuction to generate additional info for item
gen_menu_items() {

    PROMPT="${PROMPT}$1"
    VAR_NAME="$2"
    FUNC_ADDITIONAL_INFO="$3"

    # set $@ from variable name in $2
    eval set \$$VAR_NAME

    [ -z "$MENU_INDEX" ] && MENU_INDEX=0
    for ITEM in $@; do
        MENU_INDEX=$((MENU_INDEX + 1))

        ADDITIONAL_INFO=
        if [ -n "$FUNC_ADDITIONAL_INFO" ]; then
            eval ADDITIONAL_INFO="\"\$($FUNC_ADDITIONAL_INFO$ITEM)\""
        fi

        PROMPT="${PROMPT}$(printf "%2d) %-35s [ %s ]" ${MENU_INDEX} "$ITEM" "$ADDITIONAL_INFO")\n"
        eval MENU_ITEM_${VAR_NAME}_$MENU_INDEX="\$ITEM"
    done
    PROMPT="${PROMPT}\n"
}

# $1: variable name to return distributive namw
# $2: optional parameter "new", to check if distributive already exist
ask_distro_name() {

    # clear variable if it still exist from last time
    unset $1

    # ctrl-c will cancel action
    trap 'CTRL_C=1' INT

    while printf "Enter distributive name: "
          read ANS
    do
        if [ -n "$CTRL_C" ]; then
            break
        fi

        if echo "$ANS" | grep -q '[^a-zA-Z0-9_-]'; then
            msg warn "Distributive name must consist only 'a-z', 'A-Z', '0-9', '_' or '-'"
            continue
        fi

        if [ "$2" = "new" -a -e $DISTROS_DIR/$ANS ]; then
            msg warn "Distributive \"$ANS\" already exist"
            continue
        fi

        eval $1="\$ANS"
        break
    done
    trap - INT
    unset CTRL_C
}

clear_variables_by_prefix() {
    for VAR in $(set | grep -o "^$1[A-Z0-9_]*"); do
        unset $VAR
    done
}

menu_unset_variables() {
    unset PROMPT MENU_INDEX
    clear_variables_by_prefix MENU_ITEM_
}

ask_yes() {
    while printf "$1[yes/no]: "
          read ANS
    do
        case $ANS in
            yes) return 0;;
            no)  return 1;;
            *)   msg err "Wrong input";;
        esac
    done
}

get_active_service_status() {
    YAML=$(basename $1)
    if [ -L $DISTRO_ACTIVE_LINK/$YAML ]; then
        YAML="$(readlink $DISTRO_ACTIVE_LINK/$YAML | sed 's,\(\.\./\)*,,')"
        [ ! -e $YAML ] && YAML="$YAML (not exist!)"
        echo "is link to $YAML"
    else
        echo "is file $(readlink $DISTRO_ACTIVE_LINK)/$YAML"
    fi
    unset YAML
}

get_distro_status() {

    if [ ! -e "$1"/.env ]; then
        echo 'No .env(!) '
    fi

    SERVICES=$(get_services_active_list $1)
    if [ -n "$SERVICES" ]; then
        echo services: $SERVICES
    fi
    unset SERVICES
}

make_docker_compose_yaml() {
    DIR_IN="$(readlink $1)"
    FILE_OUT="$2/docker-compose.yaml"

    SEP='###########################'

    unset FIRST

    for YAML in $DIR_IN/*.yaml; do
        case $1 in
            *.override.yaml) ;;
            *)
                if [ -L $YAML ]; then
                    YAML_REAL=$(readlink $YAML)
                fi
                if [ -z "$FIRST" ]; then
                    FIRST=1
                    printf "$SEP$SEP$SEP\n" > $FILE_OUT
                    printf "# File automatically generated by BeFAIR (https://github.com/CoronaWhy/befair)\n#\n" >> $FILE_OUT
                    printf "# Distributives \"$DIR_IN\" as standalone distributives\n" >> $FILE_OUT
                    printf "$SEP$SEP$SEP\n\n" >> $FILE_OUT
                    printf "\n$SEP %-30s $SEP\n\n" $YAML_REAL >> $FILE_OUT
                    cat $YAML             >> $FILE_OUT
                else
                    printf "\n$SEP %-30s $SEP\n\n" $YAML_REAL >> $FILE_OUT
                    sed -e '/^version:/d; /^services:/d' $YAML >> $FILE_OUT
                fi
            ;;
        esac
    done

}

export_standalone_distributive() {
    DISTRO_DIR=$(readlink $1)
    DISTRO_NAME=$(basename $DISTRO_DIR)
    DISTRO_STANDALONE_DIR=$STANDALONE_DIR/$DISTRO_NAME

    if ! distro_is_valid $DISTRO_DIR err; then
        msg err "Exporting "$DISTRO_NAME" fail"
        return
    fi

    if [ -d $DISTRO_STANDALONE_DIR ]; then
        if ask_yes "Directory $DISTRO_STANDALONE_DIR exist, do you want remove it before export?"; then
            rm -r $DISTRO_STANDALONE_DIR
        fi
    fi
    mkdir -p $STANDALONE_DIR/$DISTRO_NAME

    make_docker_compose_yaml $DISTRO_ACTIVE_LINK $DISTRO_STANDALONE_DIR

    cp mk/standalone-template.mk $DISTRO_STANDALONE_DIR/Makefile
    if ! useremail=dummy traefikhost=dummy COMPOSE_FILE=$DISTRO_STANDALONE_DIR/docker-compose.yaml docker-compose config -q; then
        msg norm "$MENU_HR"
        msg err  "Export to $DISTRO_STANDALONE_DIR/docker-compose.yaml fail"
        msg norm ""
        msg tips "Checkout this generated docker-compose.yaml for errors:"
        msg tips "\$ cd $DISTRO_STANDALONE_DIR"
        msg tips "\$ make check"
        return
    fi

    cp $DISTRO_DIR/.env* $DISTRO_STANDALONE_DIR/ 2> /dev/null || true
    cp $DISTRO_DIR/*.override.yaml $DISTRO_STANDALONE_DIR/ 2> /dev/null || true

    # TODO: copy volumes(?) and secrets

    msg info "Active project exported to $DISTRO_STANDALONE_DIR/"
    msg info ""
    msg tips "You can make tar.gz by:"
    msg tips "\$ cd $DISTRO_STANDALONE_DIR"
    msg tips "\$ make tgz"
}

############################################################################################
menu_show_active_distributive() {
    msg norm $MENU_HR
    if [ ! -L $DISTRO_ACTIVE_LINK ]; then
        msg warn "No active distributive"
        msg norm $MENU_HR
        return
    fi

    DISTRO_ACTIVE=$(basename $(readlink $DISTRO_ACTIVE_LINK))
    if ! distro_is_valid $DISTROS_DIR/$DISTRO_ACTIVE warn; then
        msg norm $MENU_HR
    fi

    echo -n "Active distributive is \"$DISTRO_ACTIVE\". "

    SERVICES_ACTIVE=$(get_services_active_list $DISTRO_ACTIVE_LINK)
    if [ -n "$SERVICES_ACTIVE" ]; then
        gen_menu_items "Choose active service to disable it:\n" \
                       SERVICES_ACTIVE \
                       "get_active_service_status "
    fi

    SERVICES_AVAILABLE=$(get_services_available_list $DISTRO_ACTIVE_LINK)
    if [ -n "$SERVICES_AVAILABLE" ]; then
        gen_menu_items "Choose available service to enable it:\n" SERVICES_AVAILABLE
    fi
}

menu_show_prompt() {

    if [ ! -L $DISTRO_ACTIVE_LINK ]; then
        ACTIVATE_DISTRO=$(get_distros_list $DISTROS_DIR)
    fi

    ############ services choose list ##############
    case $MENU_MODE in
        create-distro)
            COPY_DISTRO="$(get_distros_list $DISTROS_DIR)"
            gen_menu_items "Available distributives. Choose distributive to make COPY of it:\n" \
                           COPY_DISTRO \
                           "get_distro_status $DISTROS_DIR/"
            PROMPT="${PROMPT} m) Make new distributive\n"
            PROMPT="${PROMPT} R) Remove distributive\n"
        ;;

        remove-distro)
            REMOVE_DISTRO="$(get_distros_list $DISTROS_DIR)"
            gen_menu_items "Available distributives. Choose distributive to REMOVE it:\n" \
                           REMOVE_DISTRO \
                           "get_distro_status $DISTROS_DIR/"
        ;;
    esac

    if [ -L $DISTRO_ACTIVE_LINK ]; then
        PROMPT="${PROMPT} d) Disable current distributive\n"
        PROMPT="${PROMPT} r) Rename current distributive\n"
        if distro_is_valid $DISTROS_DIR/$DISTRO_ACTIVE null; then
            PROMPT="${PROMPT}\n e) Export from current distributive to standalone distributive docker-compose.yaml\n"
        fi
        PROMPT="${PROMPT}\n"
    fi

    ############ distributive choose list ##############
    case $MENU_MODE in
        choose-distro-available)
            if [ -L $DISTRO_ACTIVE_LINK ]; then
                ACTIVATE_DISTRO=$(get_distros_list $DISTROS_DIR)

                PROMPT="${PROMPT}$MENU_HR\n\n"
                # to $DISTROS_DIR/ will be added ITEM in gen_menu_items
                gen_menu_items "Available distributives. Choose distributive to make it active:\n" \
                               ACTIVATE_DISTRO \
                               "get_distro_status $DISTROS_DIR/"
            fi
        ;;

        *)
            if [ ! -L $DISTRO_ACTIVE_LINK ]; then
                # to $DISTROS_DIR/ will be added ITEM in gen_menu_items
                gen_menu_items "Available distributives. Choose distributive to make it active:\n" \
                               ACTIVATE_DISTRO \
                               "get_distro_status $DISTROS_DIR/"
            fi
        ;;
    esac
    if [ -L $DISTRO_ACTIVE_LINK -a "$MENU_MODE" != "choose-distro-available" ]; then
        PROMPT="${PROMPT}$MENU_HR\n\n"
        PROMPT="${PROMPT} c) Choose available distributive         [ mode ]\n"
    fi


    ############ distributives modes list ##############
    PROMPT="${PROMPT}\n$MENU_HR\n\n"
    if [ "$MENU_MODE" != "create-distro" ]; then
        PROMPT="${PROMPT} C) Create new distributive               [ mode ]\n"
    fi

    if [ "$MENU_MODE" != "remove-distro" ]; then
        PROMPT="${PROMPT} R) Remove distributive                   [ mode ]\n"
    fi

    PROMPT="${PROMPT}\n Enter) Refresh screen or quit from mode\n"
    PROMPT="${PROMPT} q) Quit\n\nChoose> "
    unset MENU_MODE

    printf "$PROMPT"
}

# function handle MENU_ITEM_* variables and apply actions according them
menu_numeric_index_action() {
    for TYPE in ACTIVATE_DISTRO SERVICES_ACTIVE SERVICES_AVAILABLE COPY_DISTRO REMOVE_DISTRO; do
        eval ITEM=\$MENU_ITEM_${TYPE}_$ANS

        if [ -z "$ITEM" ]; then
            continue
        fi
        case $TYPE in
            ACTIVATE_DISTRO)
                ln -fns $DISTROS_DIR/$ITEM $DISTRO_ACTIVE_LINK
                msg info "Distributive \"$ITEM\" active now"
            ;;

            SERVICES_ACTIVE)
                ITEM=$(basename $ITEM)
                if [ ! -L $DISTRO_ACTIVE_LINK/$ITEM ]; then
                    msg err "Active service \"$ITEM\" is not symolic link"
                    # FIXME: implement. "Do you want to remove it?"
                else
                    rm $DISTRO_ACTIVE_LINK/$ITEM
                    msg info "Active service \"$ITEM\" disabled"
                fi
            ;;

            SERVICES_AVAILABLE)
                ln -frs $SERVICES_AVAILABLE_DIR/$ITEM $DISTRO_ACTIVE_LINK/
                msg info "Available service \"$ITEM\" enabled"
            ;;

            COPY_DISTRO)
                ask_distro_name DISTRO_NEW new
                if [ -n "$DISTRO_NEW" ]; then
                    cp -ra $DISTROS_DIR/$ITEM $DISTROS_DIR/$DISTRO_NEW
                    msg info "Distributive \"$DISTRO_NEW\" created from \"$ITEM\""
                fi
            ;;

            REMOVE_DISTRO)
                if ask_yes "Do you really want REMOVE \"$ITEM\"? "; then
                    if [ -L $DISTRO_ACTIVE_LINK ]; then
                        DISTRO_CURRENT=$(basename $(readlink $DISTRO_ACTIVE_LINK))
                        if [ "$DISTRO_CURRENT" = "$ITEM" ]; then
                            rm $DISTRO_ACTIVE_LINK
                            msg info "Distributive \"$ITEM\" disabled"
                        fi
                    fi
                    rm -r $DISTROS_DIR/$ITEM/
                    msg info "Distributive \"$ITEM\" removed"
                fi
            ;;

            *)
                msg warn "Unknown action $TYPE"
            ;;
       esac

       msg info ""
       break
   done
}

menu_main() {

    clear
    while menu_unset_variables
          menu_show_active_distributive
          menu_show_prompt
          read ANS
    do
        clear

        case $ANS in
            [0-9]*) menu_numeric_index_action         ;;
            c)      MENU_MODE=choose-distro-available ;;
            C)      MENU_MODE=create-distro           ;;
            R)      MENU_MODE=remove-distro           ;;
            m)
                ask_distro_name DISTRO_NEW new
                if [ -n "$DISTRO_NEW" ]; then
                    mkdir -p $DISTROS_DIR/$DISTRO_NEW
                    ln -rs $DISTROS_DIR/../mk/distro-makefile.mk $DISTROS_DIR/$DISTRO_NEW/Makefile
                    # TODO: create .env file
                    msg info "Distributive \"$DISTRO_NEW\" created"
                fi
            ;;
            r)
                ask_distro_name DISTRO_NEW new
                if [ -n "$DISTRO_NEW" ]; then
                    DISTRO_CURRENT=$(readlink $DISTRO_ACTIVE_LINK)
                    mv $DISTRO_CURRENT $DISTROS_DIR/$DISTRO_NEW
                    ln -fns $DISTROS_DIR/$DISTRO_NEW $DISTRO_ACTIVE_LINK
                    msg info "Distributive \"$(basename $DISTRO_CURRENT)\" renamed to\"$DISTRO_NEW\""
                fi
            ;;
            d)
                [ -L $DISTRO_ACTIVE_LINK ] && rm $DISTRO_ACTIVE_LINK
                msg info "Active distributive \"$DISTRO_ACTIVE\" disabled."
            ;;
            e)
                export_standalone_distributive $DISTRO_ACTIVE_LINK
            ;;

            q) exit ;;
            "") ;;
            *) printf "Wrong input\n\n" >&2 ;;
          esac
    done
}

################################
check_active

menu_main
